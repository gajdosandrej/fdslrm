% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fitDiagFDSLRM.R
\name{fitDiagFDSLRM}
\alias{fitDiagFDSLRM}
\title{Fitting and diagnostic of FDSLRM}
\usage{
fitDiagFDSLRM(
  x,
  times,
  freq_mean,
  poly_trend_degree = 0,
  include_fixed_eff,
  freq_random,
  include_random_eff,
  fit_function = "lme",
  var_estim_method = "REML",
  season_period = 0,
  display_plots = FALSE
)
}
\arguments{
\item{x}{time series observation.}

\item{times}{vector of observation times.}

\item{freq_mean}{vector of (Fourier) frequencies to create the design matrix for fixed effects.}

\item{poly_trend_degree}{degree of polynomial in linear regression representing the mean value.
Default is \code{poly_trend_degree = 0}. Available just for \code{fit_function = lme}.}

\item{include_fixed_eff}{vector of zeros / ones to indicate which cosine and sine component
corresponding to particular frequency in \code{freq_mean} should be excluded / included.}

\item{freq_random}{vector of (Fourier) frequencies to create the design matrix for random effects.}

\item{include_random_eff}{vector of zeros / ones to indicate which cosine and sine component
corresponding to particular frequency in \code{freq_random} should be excluded / included.}

\item{fit_function}{type of function to fit the model. One of the following types is acceptable: \code{"lme", "mixed", "mmer"}.
Default is \code{fit_function = "lme"}.}

\item{var_estim_method}{type of method for estimating variance parameters. Default is \code{"REML"}.
For \code{fit_function = "lme"} the \code{"REML"} and \code{"ML"} estimates are available.
For \code{fit_function = "mixed"} the following estimates are available: \code{"ML", "REML", "MINQEI", "MINQEUI"}.}

\item{season_period}{input parameter of type numeric expressing the period of seasonality.
Default is \code{season_period = 0}.}

\item{display_plots}{input parameter of type logical indicating if all diagnostic plots should be drawn.
Default value is \code{display_plots = FALSE}.}
}
\value{
This function returns an output - \code{result}, which is a list with the following elements (for LMM):
\itemize{
\item \code{result$fixed_effects} estimates of fixed effects (regression parameter \eqn{\beta}),
\item \code{result$random_effects} BLUPs of random effects \eqn{Y},
\item \code{result$error_variance} estimate of variance of white noise component,
\item \code{result$rand_eff_variance} estimates of variances of random effects,
\item \code{result$marg_fitted_values} marginal fitted values (i.e. trend i.e. mean value estimate),
\item \code{result$cond_fitted_values} conditional fitted values (estimate of trend plus BLUP of random effects),
\item \code{result$marg_residuals} marginal residuals,
\item \code{result$cond_residuals} conditional residuals,
\item \code{result$norm_cond_resid} normalized conditional residuals,
\item \code{result$pearson_resid} Pearson's residuals,
\item \code{result$Box_test} Box test of conditional residuals independence (not adjusted for time series (non)-seasonality),
\item \code{result$BoxLjung_test} Box-Ljung test of conditional residuals independence (not adjusted for time series (non)-seasonality),
\item \code{result$ShapiroWilk_test_norm_cond_resid} Shapiro-Wilk normality test of normalized residuals,
\item \code{result$ShapiroWilk_test_stand_least_conf_resid}Shapiro-Wilk normality test of least confounded conditional residuals,
\item \code{result$lme_fit} object inheriting from class \code{lme}, an output of function \code{lme} containing details about model fitting,
\item \code{result$fit_summary} summary info about model fitting,
\item \code{result$diag_resid} an ouput (list) of diagnostic function created by Singer et al. (2017),
\item \code{result$time_series} original time series data (input for model fitting),
\item \code{result$matrix_F} design matrix for fixed effects,
\item \code{result$matrix_V} design matrix for random effects,
\item \code{result$data_frame} data frame containing original time series, design matrices, grouping factors (for lme fitting),
\item \code{result$output$Box_test_season_resid} Box test of conditional residuals independence (accounts for time series seasonality),
available if \code{season_period} input argument is greater than zero,
\item \code{result$output$BoxLjung_test_season_resid} Box-Ljung test of conditional residuals independence (accounts for time series seasonality),
available if \code{season_period} input argument is greater than zero,
\item \code{result$Box_test_lag10_resid} Box test of conditional residuals independence (accounts for time series non-seasonality),
available if \code{season_period = 0},
\item \code{result$BoxLjung_test_lag10_resid} Box-Ljung test of conditional residuals independence (accounts for time series non-seasonality),
available if \code{season_period = 0},
\item \code{result$diagnostic_plots_names} vector of available diagnostic plots names, these can be displayed by function \code{drawDiagPlots}.
}
For CLRM (using \code{lm}) and also for other fitting functions than \code{lme} the output looks slightly different.
If set the diagnostic plots could be drawn.
}
\description{
\code{fitDiagFSDLRM(x, times, freq_mean, poly_trend_degree = 0, include_fixed_eff, freq_random, include_random_eff, var_estim_method = "REML", fit_function = "lme", season_period = 0, display_plots = FALSE)}
fits particular FDSLRM (in the form of linear mixed model - LMM or classical linear regression model - CLRM)
to time series data, returns estimates of all model's parameters
and it also returns the model diagnostic (numerical and graphical).
}
\details{
Fitting functions \code{lme} (\code{lm} in case of CLRM), \code{mixed} (Witkovsky, 2002; Gajdos 2018),
\code{mmer} (Covarrubias-Pazaran, 2016)
consequently offer a little bit different diagnostic tools and outputs.
For example when \code{lme} is used the residual diagnostic is created with the help
of open source R code from Singer et al. (2017).

If there are no frequencies for random effects as input, just the frequencies for fixed effects
then the CLRM is fitted automatically by the \code{lm} function.
}
\note{
Ver.: 13-Jan-2019 11:15:48.
}
\examples{
## EXAMPLE 1 (LMM)
# load all necessary R packages and functions to fit and make diagnostic of FDSLRM
initialFDSLRM()
# the following data set was adapted from Hyndman's package fpp2 (Hyndman 2018)
# data represent total quarterly visitor nights (in millions) from 1998-2016 in one of the regions
# of Australia - inner zone of Victoria state
# the number of time series observations is  n = 76
# data visualization
autoplot(window(visnights)[,15], ylab = "Visnights")
# time series realization, observation times
dt <- as.numeric((window(visnights)[,15]))
t <- 1:length(dt)
# periodogram to identify the most significant frequencies to build the model (design matrices)
periodo <- spec.pgram(dt, log="no")
# according to periodogram we choose the frequencies 1/80, 2/80 for trend
# and the frequencies 20/80, 40/80 for random component
# fit the model with lme function
output_lme <- fitDiagFDSLRM(dt, t, c(1/80, 2/80), include_fixed_eff = c(1,0,0,1),
                          freq_random = c(20/80, 40/80), include_random_eff = c(1,1,1,0),
                          poly_trend_degree = 0, season_period = 4)
# draw diagnostic plots
drawDiagPlots("all", output_lme)
drawDiagPlots(output_lme$diagnostic_plots_names$FittedTimeSeries, output_lme)
# show summary of model fit
str(output_lme$fit_summary)
# fit the model with mixed function
output_mixed <- fitDiagFDSLRM(dt, t, c(1/80, 2/80), include_fixed_eff = c(1,0,0,1),
                            freq_random = c(20/80, 40/80), include_random_eff = c(1,1,1,0),
                            var_estim_method = "MINQEI",
                            fit_function = "mixed", season_period = 4)
# draw diagnostic plots
drawDiagPlots("all", output_mixed)
drawDiagPlots(output_mixed$diagnostic_plots_names$CumulatPeriodogCondResid, output_lme)
# show summary of model fit
str(output_mixed$mixed_fit)

# fit the model with mmer function
output_mmer <- fitDiagFDSLRM(dt, t, c(1/80, 2/80), include_fixed_eff = c(1,0,0,1),
                            freq_random = c(20/80, 40/80), include_random_eff = c(1,1,1,0),
                            fit_function = "mmer", season_period = 4)
# draw diagnostic plots
drawDiagPlots("all", output_mmer)
drawDiagPlots(output_mmer$diagnostic_plots_names$CumulatPeriodogCondResid, output_mmer)
# show summary of model fit
str(output_mmer$mmer_fit)

## EXAMPLE 2 (CLRM)
# load all necessary R packages and functions to fit and make diagnostic of FDSLRM
initialFDSLRM()
# the following data set was adapted from Hyndman's package fpp2 (Hyndman 2018)
# data represent total quarterly visitor nights (in millions) from 1998-2016 in one of the regions
# of Australia - inner zone of Victoria state
# the number of time series observations is  n = 76
# data visualization
autoplot(window(visnights)[,15], ylab = "Visnights")
# time series realization, observation times
dt <- as.numeric((window(visnights)[,15]))
t <- 1:length(dt)
# periodogram to identify the most significant frequencies to build the model (design matrices)
periodo <- spec.pgram(dt, log="no")
# according to periodogram we choose the frequencies 1/80, 2/80 for trend
# and the frequencies 20/80, 40/80 for random component
# fit the model with lme function
output_lm <- fitDiagFDSLRM(dt, t, c(1/80, 2/80, 20/80, 40/80), include_fixed_eff = c(1,0,0,1,0,1,1,0), season_period = 4)
# draw diagnostic plots
drawDiagPlots("all", output_lm)
drawDiagPlots(output_lm$diagnostic_plots_names$FittedTimeSeries, output_lme)
# show summary of model fit
str(output_lm$fit_summary)
}
\references{
Covarrubias-Pazaran G. 2016: Genome assisted prediction of quantitative traits using the R package sommer.
PLoS ONE 11(6):1-15.

Gajdos, A. (2018): MMEinR: R version of Witkovsky's Matlab implementation
of iterative solving of Henderson's mixed model equations.
https://github.com/gajdosandrej/MMEinR.

Pinheiro J., Bates D., DebRoy S., Sarkar D. and R Core Team (2019): _nlme:
Linear and Nonlinear Mixed Effects Models_. R package version 3.1-131,
<URL: https://CRAN.R-project.org/package=nlme>.

Singer, J. M., Rocha, F. M. M., and Nobre, J. S. (2017): Graphical Tools for Detecting Departures
from Linear Mixed Model Assumptions and Some Remedial Measures.
\emph{International Statistical Review}, 85: 290-324.

Witkovsky, V.: MATLAB Algorithm for solving Henderson's Mixed Model Equations. Technical Report No. 3/2000,
Institute of Measurement Science, Slovak Academy of Sciences, Bratislava, 2000.
}
